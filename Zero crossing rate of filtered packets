import numpy as np
import matplotlib.pyplot as plt

def compute_zero_crossing_rate(signal, frame_length, hop_length):
    """
    Compute zero-crossing rate manually for complex signals.
    This calculates zero crossings on the magnitude of the complex signal.
    """
    # Calculate the magnitude of the complex signal
    magnitude = np.abs(signal)
    
    # Frame the signal
    num_frames = (len(magnitude) - frame_length) // hop_length + 1
    zcr = []
    
    for i in range(num_frames):
        start = i * hop_length
        end = start + frame_length
        frame = magnitude[start:end]
        
        # Compute zero crossings (sign changes around the mean)
        zero_crossings = np.sum(np.diff(frame > frame.mean()))
        zcr.append(zero_crossings / frame_length)
    
    return np.array(zcr)

# Loop through all extracted packets, apply ZCR computation, and plot
for idx, (start_idx, end_idx) in enumerate(packets, start=1):
    # Extract corresponding signal samples for the packet
    current_packet = filtered_data[start_idx:end_idx]

    # Correct the frequency offset for the packet
    offset, band_found = processor.estimate_offset(current_packet, sampling_rate, packet_type="droneid")

    if band_found:
        # Apply frequency shift correction
        corrected_packet = DroneSignalProcessor.fshift(current_packet, -offset, sampling_rate)

       

        # Compute the Zero Crossing Rate (ZCR) on the magnitude
        frame_length = 4096
        hop_length = 1024
        zcr = compute_zero_crossing_rate(corrected_packet, frame_length, hop_length)

        # Plot the Zero Crossing Rate
        plt.figure(figsize=(10, 6))
        plt.plot(zcr, label=f"Packet {idx} ZCR")
        plt.title(f"Zero Crossing Rate for Packet {idx}")
        plt.xlabel("Frame")
        plt.ylabel("Zero Crossing Rate")
        plt.legend(loc='upper right')
        plt.grid(True)
        plt.show()
        
    else:
        print(f"Packet {idx}: No suitable band found for offset correction.")
