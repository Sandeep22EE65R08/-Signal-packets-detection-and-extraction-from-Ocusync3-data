# Parameters
fs = 50e6  # Sampling frequency (50 MHz)
nfft_welch = 2028  # Number of FFT points for Welch's method

# Loop through all extracted packets, apply frequency offset correction and filter, and compute PSD
for idx, (start_idx, end_idx) in enumerate(packets, start=1):
    # Extract corresponding signal samples for the packet
    current_packet = data[start_idx:end_idx]

    # Correct the frequency offset for the packet (assuming offset is calculated previously)
    if band_found:
        # Apply frequency shift correction using the static method of DroneSignalProcessor
        corrected_packet = DroneSignalProcessor.fshift(current_packet, -offset, fs)

        # Apply low-pass filter to the corrected packet (e.g., 4.5 MHz cutoff)
        filtered_packet, sos = lowpass(corrected_packet, 8.5e6, fs)

        # Ensure data length is sufficient for Welch's method
        if len(filtered_packet) < nfft_welch:
            print(f"Insufficient data length for Welch's method in Packet {idx}")
        else:
            # Apply Hamming window
            window = hamming(len(filtered_packet))
            data_windowed = filtered_packet * window

            # Calculate PSD using Welch's method
            f, Pxx_den = welch(data_windowed, fs, nperseg=nfft_welch, return_onesided=False)

            # Shift frequency and PSD for negative frequencies
            Pxx_den_shifted = np.fft.fftshift(Pxx_den)
            f_shifted = np.fft.fftshift(f)

            # Calculate the mean PSD value
            mean_psd_value = np.mean(Pxx_den_shifted)
            print(f"Mean PSD Value for Packet {idx}: {mean_psd_value:.2e} V^2/Hz")

            # Plot the PSD
            plt.figure(figsize=(10, 6))
            plt.semilogy(f_shifted / 1e6, Pxx_den_shifted)  # Convert frequency to MHz
            plt.axhline(1.1 * Pxx_den_shifted.mean(), color='r', linestyle='--', label="Mean PSD")
            plt.xlabel("Frequency [MHz]")
            plt.ylabel("PSD [V**2/Hz]")
            plt.title(f"Power Spectral Density (PSD) of Filtered Packet {idx}")
            plt.legend()
            plt.show()
    else:
        print(f"Packet {idx}: No suitable band found for offset correction.")
